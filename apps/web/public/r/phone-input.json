{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-input",
  "type": "registry:component",
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "components/domain-ui/experimental/phone-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { cn } from \"@/lib/utils\"\n\n// Country data with flags, names, and calling codes\nconst COUNTRIES = [\n  { code: \"US\", name: \"United States\", flag: \"ðŸ‡ºðŸ‡¸\", dialCode: \"+1\" },\n  { code: \"CA\", name: \"Canada\", flag: \"ðŸ‡¨ðŸ‡¦\", dialCode: \"+1\" },\n  { code: \"GB\", name: \"United Kingdom\", flag: \"ðŸ‡¬ðŸ‡§\", dialCode: \"+44\" },\n  { code: \"AU\", name: \"Australia\", flag: \"ðŸ‡¦ðŸ‡º\", dialCode: \"+61\" },\n  { code: \"DE\", name: \"Germany\", flag: \"ðŸ‡©ðŸ‡ª\", dialCode: \"+49\" },\n  { code: \"FR\", name: \"France\", flag: \"ðŸ‡«ðŸ‡·\", dialCode: \"+33\" },\n  { code: \"IT\", name: \"Italy\", flag: \"ðŸ‡®ðŸ‡¹\", dialCode: \"+39\" },\n  { code: \"ES\", name: \"Spain\", flag: \"ðŸ‡ªðŸ‡¸\", dialCode: \"+34\" },\n  { code: \"NL\", name: \"Netherlands\", flag: \"ðŸ‡³ðŸ‡±\", dialCode: \"+31\" },\n  { code: \"BE\", name: \"Belgium\", flag: \"ðŸ‡§ðŸ‡ª\", dialCode: \"+32\" },\n  { code: \"CH\", name: \"Switzerland\", flag: \"ðŸ‡¨ðŸ‡­\", dialCode: \"+41\" },\n  { code: \"AT\", name: \"Austria\", flag: \"ðŸ‡¦ðŸ‡¹\", dialCode: \"+43\" },\n  { code: \"SE\", name: \"Sweden\", flag: \"ðŸ‡¸ðŸ‡ª\", dialCode: \"+46\" },\n  { code: \"NO\", name: \"Norway\", flag: \"ðŸ‡³ðŸ‡´\", dialCode: \"+47\" },\n  { code: \"DK\", name: \"Denmark\", flag: \"ðŸ‡©ðŸ‡°\", dialCode: \"+45\" },\n  { code: \"FI\", name: \"Finland\", flag: \"ðŸ‡«ðŸ‡®\", dialCode: \"+358\" },\n  { code: \"PL\", name: \"Poland\", flag: \"ðŸ‡µðŸ‡±\", dialCode: \"+48\" },\n  { code: \"CZ\", name: \"Czech Republic\", flag: \"ðŸ‡¨ðŸ‡¿\", dialCode: \"+420\" },\n  { code: \"HU\", name: \"Hungary\", flag: \"ðŸ‡­ðŸ‡º\", dialCode: \"+36\" },\n  { code: \"RO\", name: \"Romania\", flag: \"ðŸ‡·ðŸ‡´\", dialCode: \"+40\" },\n  { code: \"BG\", name: \"Bulgaria\", flag: \"ðŸ‡§ðŸ‡¬\", dialCode: \"+359\" },\n  { code: \"HR\", name: \"Croatia\", flag: \"ðŸ‡­ðŸ‡·\", dialCode: \"+385\" },\n  { code: \"SI\", name: \"Slovenia\", flag: \"ðŸ‡¸ðŸ‡®\", dialCode: \"+386\" },\n  { code: \"SK\", name: \"Slovakia\", flag: \"ðŸ‡¸ðŸ‡°\", dialCode: \"+421\" },\n  { code: \"LT\", name: \"Lithuania\", flag: \"ðŸ‡±ðŸ‡¹\", dialCode: \"+370\" },\n  { code: \"LV\", name: \"Latvia\", flag: \"ðŸ‡±ðŸ‡»\", dialCode: \"+371\" },\n  { code: \"EE\", name: \"Estonia\", flag: \"ðŸ‡ªðŸ‡ª\", dialCode: \"+372\" },\n  { code: \"IE\", name: \"Ireland\", flag: \"ðŸ‡®ðŸ‡ª\", dialCode: \"+353\" },\n  { code: \"PT\", name: \"Portugal\", flag: \"ðŸ‡µðŸ‡¹\", dialCode: \"+351\" },\n  { code: \"GR\", name: \"Greece\", flag: \"ðŸ‡¬ðŸ‡·\", dialCode: \"+30\" },\n  { code: \"CY\", name: \"Cyprus\", flag: \"ðŸ‡¨ðŸ‡¾\", dialCode: \"+357\" },\n  { code: \"MT\", name: \"Malta\", flag: \"ðŸ‡²ðŸ‡¹\", dialCode: \"+356\" },\n  { code: \"LU\", name: \"Luxembourg\", flag: \"ðŸ‡±ðŸ‡º\", dialCode: \"+352\" },\n  { code: \"IS\", name: \"Iceland\", flag: \"ðŸ‡®ðŸ‡¸\", dialCode: \"+354\" },\n  { code: \"JP\", name: \"Japan\", flag: \"ðŸ‡¯ðŸ‡µ\", dialCode: \"+81\" },\n  { code: \"KR\", name: \"South Korea\", flag: \"ðŸ‡°ðŸ‡·\", dialCode: \"+82\" },\n  { code: \"CN\", name: \"China\", flag: \"ðŸ‡¨ðŸ‡³\", dialCode: \"+86\" },\n  { code: \"IN\", name: \"India\", flag: \"ðŸ‡®ðŸ‡³\", dialCode: \"+91\" },\n  { code: \"SG\", name: \"Singapore\", flag: \"ðŸ‡¸ðŸ‡¬\", dialCode: \"+65\" },\n  { code: \"HK\", name: \"Hong Kong\", flag: \"ðŸ‡­ðŸ‡°\", dialCode: \"+852\" },\n  { code: \"TW\", name: \"Taiwan\", flag: \"ðŸ‡¹ðŸ‡¼\", dialCode: \"+886\" },\n  { code: \"MY\", name: \"Malaysia\", flag: \"ðŸ‡²ðŸ‡¾\", dialCode: \"+60\" },\n  { code: \"TH\", name: \"Thailand\", flag: \"ðŸ‡¹ðŸ‡­\", dialCode: \"+66\" },\n  { code: \"PH\", name: \"Philippines\", flag: \"ðŸ‡µðŸ‡­\", dialCode: \"+63\" },\n  { code: \"ID\", name: \"Indonesia\", flag: \"ðŸ‡®ðŸ‡©\", dialCode: \"+62\" },\n  { code: \"VN\", name: \"Vietnam\", flag: \"ðŸ‡»ðŸ‡³\", dialCode: \"+84\" },\n  { code: \"NZ\", name: \"New Zealand\", flag: \"ðŸ‡³ðŸ‡¿\", dialCode: \"+64\" },\n  { code: \"ZA\", name: \"South Africa\", flag: \"ðŸ‡¿ðŸ‡¦\", dialCode: \"+27\" },\n  { code: \"BR\", name: \"Brazil\", flag: \"ðŸ‡§ðŸ‡·\", dialCode: \"+55\" },\n  { code: \"MX\", name: \"Mexico\", flag: \"ðŸ‡²ðŸ‡½\", dialCode: \"+52\" },\n  { code: \"AR\", name: \"Argentina\", flag: \"ðŸ‡¦ðŸ‡·\", dialCode: \"+54\" },\n  { code: \"CL\", name: \"Chile\", flag: \"ðŸ‡¨ðŸ‡±\", dialCode: \"+56\" },\n  { code: \"CO\", name: \"Colombia\", flag: \"ðŸ‡¨ðŸ‡´\", dialCode: \"+57\" },\n  { code: \"PE\", name: \"Peru\", flag: \"ðŸ‡µðŸ‡ª\", dialCode: \"+51\" },\n  { code: \"UY\", name: \"Uruguay\", flag: \"ðŸ‡ºðŸ‡¾\", dialCode: \"+598\" },\n  { code: \"PY\", name: \"Paraguay\", flag: \"ðŸ‡µðŸ‡¾\", dialCode: \"+595\" },\n  { code: \"BO\", name: \"Bolivia\", flag: \"ðŸ‡§ðŸ‡´\", dialCode: \"+591\" },\n  { code: \"EC\", name: \"Ecuador\", flag: \"ðŸ‡ªðŸ‡¨\", dialCode: \"+593\" },\n  { code: \"VE\", name: \"Venezuela\", flag: \"ðŸ‡»ðŸ‡ª\", dialCode: \"+58\" }\n]\n\nexport interface PhoneData {\n  phoneNumber: string\n  countryCode: string\n  countryCallingCode: string\n  nationalNumber: string\n  internationalNumber: string\n  uri: string\n  possibleCountries: string[]\n  isValid: boolean\n}\n\nexport interface PhoneInputProps {\n  value?: string\n  onChange?: (value: string) => void\n  onPhoneDataChange?: (data: PhoneData) => void\n  placeholder?: string\n  disabled?: boolean\n  className?: string\n  defaultCountry?: string\n}\n\nconst formatPhoneNumber = (value: string, countryCode: string): string => {\n  const digits = value.replace(/\\\\D/g, \\\"\\\")\n  \n  if (countryCode === \\\"US\\\" || countryCode === \\\"CA\\\") {\n    if (digits.length <= 3) return digits\n    if (digits.length <= 6) return `(${digits.slice(0, 3)}) ${digits.slice(3)}`\n    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6, 10)}`\n  }\n  \n  if (digits.length <= 4) return digits\n  if (digits.length <= 7) return `${digits.slice(0, 3)} ${digits.slice(3)}`\n  if (digits.length <= 10) return `${digits.slice(0, 3)} ${digits.slice(3, 6)} ${digits.slice(6)}`\n  return `${digits.slice(0, 3)} ${digits.slice(3, 6)} ${digits.slice(6, 9)} ${digits.slice(9)}`\n}\n\nconst validatePhoneNumber = (digits: string, countryCode: string): boolean => {\n  if (countryCode === \\\"US\\\" || countryCode === \\\"CA\\\") {\n    return digits.length === 10 && digits[0] !== \\\"0\\\" && digits[0] !== \\\"1\\\"\n  }\n  return digits.length >= 7 && digits.length <= 15\n}\n\nexport const getPhoneData = (phoneNumber: string, selectedCountry: string): PhoneData => {\n  const country = COUNTRIES.find(c => c.code === selectedCountry) || COUNTRIES[0]\n  const digits = phoneNumber.replace(/\\\\D/g, \\\"\\\")\n  \n  const nationalNumber = digits\n  const internationalNumber = country.dialCode + digits\n  const isValid = validatePhoneNumber(digits, selectedCountry)\n  \n  const possibleCountries = COUNTRIES\n    .filter(c => {\n      if (c.code === selectedCountry) return true\n      return c.dialCode === country.dialCode\n    })\n    .map(c => c.code)\n\n  return {\n    phoneNumber,\n    countryCode: selectedCountry,\n    countryCallingCode: country.dialCode,\n    nationalNumber,\n    internationalNumber,\n    uri: `tel:${internationalNumber}`,\n    possibleCountries,\n    isValid\n  }\n}\n\nexport const PhoneInput = React.forwardRef<HTMLInputElement, PhoneInputProps>(\n  ({ value = \\\"\\\", onChange, onPhoneDataChange, placeholder = \\\"Enter phone number\\\", disabled, className, defaultCountry = \\\"US\\\" }, ref) => {\n    const [selectedCountry, setSelectedCountry] = React.useState(defaultCountry)\n    const [isDropdownOpen, setIsDropdownOpen] = React.useState(false)\n    const [searchQuery, setSearchQuery] = React.useState(\\\"\\\")\n    const [inputValue, setInputValue] = React.useState(value)\n    \n    const dropdownRef = React.useRef<HTMLDivElement>(null)\n    const searchRef = React.useRef<HTMLInputElement>(null)\n\n    const selectedCountryData = COUNTRIES.find(c => c.code === selectedCountry) || COUNTRIES[0]\n\n    const filteredCountries = React.useMemo(() => {\n      if (!searchQuery) return COUNTRIES\n      return COUNTRIES.filter(country =>\n        country.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        country.code.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        country.dialCode.includes(searchQuery)\n      )\n    }, [searchQuery])\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const rawValue = e.target.value\n      const formattedValue = formatPhoneNumber(rawValue, selectedCountry)\n      \n      setInputValue(formattedValue)\n      onChange?.(formattedValue)\n      \n      const phoneData = getPhoneData(formattedValue, selectedCountry)\n      onPhoneDataChange?.(phoneData)\n    }\n\n    const handleCountrySelect = (country: typeof COUNTRIES[0]) => {\n      setSelectedCountry(country.code)\n      setIsDropdownOpen(false)\n      setSearchQuery(\\\"\\\")\n      \n      const formattedValue = formatPhoneNumber(inputValue, country.code)\n      setInputValue(formattedValue)\n      onChange?.(formattedValue)\n      \n      const phoneData = getPhoneData(formattedValue, country.code)\n      onPhoneDataChange?.(phoneData)\n    }\n\n    React.useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n          setIsDropdownOpen(false)\n          setSearchQuery(\\\"\\\")\n        }\n      }\n\n      document.addEventListener(\\\"mousedown\\\", handleClickOutside)\n      return () => document.removeEventListener(\\\"mousedown\\\", handleClickOutside)\n    }, [])\n\n    React.useEffect(() => {\n      if (isDropdownOpen && searchRef.current) {\n        searchRef.current.focus()\n      }\n    }, [isDropdownOpen])\n\n    React.useEffect(() => {\n      setInputValue(value)\n    }, [value])\n\n    return (\n      <div className=\\\"relative\\\">\n        <div className=\\\"flex\\\">\n          <div className=\\\"relative\\\" ref={dropdownRef}>\n            <button\n              type=\\\"button\\\"\n              onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n              disabled={disabled}\n              className={cn(\n                \\\"flex items-center gap-2 px-3 py-2 border border-r-0 rounded-l-md bg-background hover:bg-accent transition-colors h-10\\\",\n                \\\"border-input focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\\\",\n                disabled && \\\"opacity-50 cursor-not-allowed\\\"\n              )}\n            >\n              <span className=\\\"text-base\\\">{selectedCountryData.flag}</span>\n              <span className=\\\"text-sm font-mono text-muted-foreground\\\">{selectedCountryData.dialCode}</span>\n              <svg\n                className={cn(\\\"w-4 h-4 transition-transform text-muted-foreground\\\", isDropdownOpen && \\\"rotate-180\\\")}\n                fill=\\\"none\\\"\n                stroke=\\\"currentColor\\\"\n                viewBox=\\\"0 0 24 24\\\"\n              >\n                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2} d=\\\"M19 9l-7 7-7-7\\\" />\n              </svg>\n            </button>\n\n            {isDropdownOpen && (\n              <div className=\\\"absolute top-full left-0 z-50 w-80 mt-1 bg-popover border rounded-md shadow-lg border-border\\\">\n                <div className=\\\"p-2 border-b border-border\\\">\n                  <Input\n                    ref={searchRef}\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\\\"Search countries...\\\"\n                    className=\\\"h-8 text-sm\\\"\n                  />\n                </div>\n\n                <div className=\\\"max-h-60 overflow-y-auto\\\">\n                  {filteredCountries.map((country) => (\n                    <button\n                      key={country.code}\n                      onClick={() => handleCountrySelect(country)}\n                      className={cn(\n                        \\\"w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-accent transition-colors text-sm\\\",\n                        selectedCountry === country.code && \\\"bg-accent\\\"\n                      )}\n                    >\n                      <span className=\\\"text-base\\\">{country.flag}</span>\n                      <div className=\\\"flex-1 min-w-0\\\">\n                        <div className=\\\"font-medium truncate\\\">{country.name}</div>\n                        <div className=\\\"text-xs text-muted-foreground\\\">{country.code}</div>\n                      </div>\n                      <span className=\\\"text-xs font-mono text-muted-foreground\\\">{country.dialCode}</span>\n                    </button>\n                  ))}\n                  {filteredCountries.length === 0 && (\n                    <div className=\\\"px-3 py-2 text-sm text-muted-foreground\\\">No countries found</div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <Input\n            ref={ref}\n            type=\\\"tel\\\"\n            value={inputValue}\n            onChange={handleInputChange}\n            placeholder={placeholder}\n            disabled={disabled}\n            className={cn(\\\"rounded-l-none border-l-0\\\", className)}\n          />\n        </div>\n      </div>\n    )\n  }\n)\n\nPhoneInput.displayName = \\\"PhoneInput\\\"",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "input",
      "phone",
      "international",
      "country",
      "validation",
      "formatting",
      "experimental",
      "form",
      "contact"
    ]
  }
}
