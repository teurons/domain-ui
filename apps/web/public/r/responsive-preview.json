{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-preview",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "badge",
    "resizable"
  ],
  "files": [
    {
      "path": "components/domain-ui/responsive-preview/responsive-preview.tsx",
      "content": "\"use client\";\n\nimport { Fragment, useState } from \"react\";\nimport type * as React from \"react\";\nimport { Badge } from \"@/registry/default/components/ui/badge\";\nimport { Button } from \"@/registry/default/components/ui/button\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/registry/default/components/ui/resizable\";\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { MonitorIcon, SmartphoneIcon, TabletIcon } from \"lucide-react\";\nimport type { BreakpointConfig, PreviewConfig, PreviewMode } from \"./types\";\nimport { DEFAULT_BREAKPOINTS } from \"./types\";\n\ninterface ResponsivePreviewProps {\n  children?: React.ReactNode;\n  src?: string;\n  breakpoints?: BreakpointConfig[];\n  config?: PreviewConfig;\n  className?: string;\n}\n\ninterface PreviewPanelProps {\n  breakpoint: BreakpointConfig;\n  children?: React.ReactNode;\n  src?: string;\n  mode: PreviewMode;\n  config?: PreviewConfig;\n}\n\nfunction PreviewPanel({\n  breakpoint,\n  children,\n  src,\n  mode,\n  config,\n}: PreviewPanelProps) {\n  const showLabels = config?.showLabels !== false;\n  const showScale = config?.showScale !== false;\n\n  const getDeviceIcon = (width: number) => {\n    if (width <= 480) {\n      return <SmartphoneIcon className=\"size-3\" />;\n    }\n    if (width <= 768) {\n      return <TabletIcon className=\"size-3\" />;\n    }\n    return <MonitorIcon className=\"size-3\" />;\n  };\n\n  const scalePercentage = Math.min(100, (300 / breakpoint.width) * 100);\n\n  return (\n    <div className=\"flex min-h-0 flex-col\">\n      {showLabels && (\n        <div className=\"flex items-center justify-between border-b p-3\">\n          <div className=\"flex items-center gap-2\">\n            {getDeviceIcon(breakpoint.width)}\n            <span className=\"font-medium text-sm\">\n              {breakpoint.label || breakpoint.name}\n            </span>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {breakpoint.width}Ã—{breakpoint.height || \"auto\"}\n            </Badge>\n          </div>\n          {showScale && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {scalePercentage.toFixed(0)}%\n            </Badge>\n          )}\n        </div>\n      )}\n\n      <div className=\"flex-1 overflow-auto p-4\">\n        <div\n          className=\"mx-auto border bg-background shadow-sm\"\n          style={{\n            width: `${breakpoint.width}px`,\n            minHeight: breakpoint.height ? `${breakpoint.height}px` : \"400px\",\n            maxWidth: \"100%\",\n          }}\n        >\n          {mode === \"iframe\" && src ? (\n            <iframe\n              src={src}\n              className=\"size-full border-0\"\n              title={`Preview at ${breakpoint.width}px`}\n            />\n          ) : (\n            <div className=\"size-full overflow-auto\">{children}</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ResponsivePreviewToolbar({\n  mode,\n  onModeChange,\n  config,\n  onConfigChange,\n}: {\n  mode: PreviewMode;\n  onModeChange: (mode: PreviewMode) => void;\n  config: PreviewConfig;\n  onConfigChange: (config: PreviewConfig) => void;\n}) {\n  return (\n    <div className=\"flex items-center justify-between border-b p-3\">\n      <div className=\"flex items-center gap-2\">\n        <Button\n          variant={mode === \"child\" ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={() => onModeChange(\"child\")}\n        >\n          Child\n        </Button>\n        <Button\n          variant={mode === \"iframe\" ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={() => onModeChange(\"iframe\")}\n        >\n          IFrame\n        </Button>\n      </div>\n\n      <div className=\"flex items-center gap-2\">\n        <Button\n          variant={config.showLabels ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={() =>\n            onConfigChange({ ...config, showLabels: !config.showLabels })\n          }\n        >\n          Labels\n        </Button>\n        <Button\n          variant={config.showScale ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={() =>\n            onConfigChange({ ...config, showScale: !config.showScale })\n          }\n        >\n          Scale\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default function ResponsivePreview({\n  children,\n  src,\n  breakpoints = DEFAULT_BREAKPOINTS,\n  config: initialConfig,\n  className,\n}: ResponsivePreviewProps) {\n  const [mode, setMode] = useState<PreviewMode>(src ? \"iframe\" : \"child\");\n  const [config, setConfig] = useState<PreviewConfig>({\n    showToolbar: true,\n    showLabels: true,\n    showScale: true,\n    ...initialConfig,\n  });\n\n  const showToolbar = config.showToolbar !== false;\n\n  if (breakpoints.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center rounded-md border border-dashed p-8 text-center\">\n        <div className=\"text-muted-foreground text-sm\">\n          No breakpoints configured\n        </div>\n      </div>\n    );\n  }\n\n  if (breakpoints.length === 1) {\n    return (\n      <div className={cn(\"overflow-hidden rounded-lg border\", className)}>\n        {showToolbar && (\n          <ResponsivePreviewToolbar\n            mode={mode}\n            onModeChange={setMode}\n            config={config}\n            onConfigChange={setConfig}\n          />\n        )}\n        <PreviewPanel\n          breakpoint={breakpoints[0]}\n          src={src}\n          mode={mode}\n          config={config}\n        >\n          {children}\n        </PreviewPanel>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"overflow-hidden rounded-lg border\", className)}>\n      {showToolbar && (\n        <ResponsivePreviewToolbar\n          mode={mode}\n          onModeChange={setMode}\n          config={config}\n          onConfigChange={setConfig}\n        />\n      )}\n\n      <ResizablePanelGroup direction=\"horizontal\" className=\"min-h-[500px]\">\n        {breakpoints.map((breakpoint, index) => (\n          <Fragment key={breakpoint.name}>\n            <ResizablePanel defaultSize={100 / breakpoints.length} minSize={20}>\n              <PreviewPanel\n                breakpoint={breakpoint}\n                src={src}\n                mode={mode}\n                config={config}\n              >\n                {children}\n              </PreviewPanel>\n            </ResizablePanel>\n\n            {index < breakpoints.length - 1 && <ResizableHandle withHandle />}\n          </Fragment>\n        ))}\n      </ResizablePanelGroup>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/domain-ui/responsive-preview/types.ts",
      "content": "export interface BreakpointConfig {\n  name: string;\n  width: number;\n  height?: number;\n  label?: string;\n}\n\nexport interface PreviewConfig {\n  darkMode?: boolean;\n  showToolbar?: boolean;\n  showScale?: boolean;\n  showLabels?: boolean;\n}\n\nexport type PreviewMode = \"child\" | \"iframe\";\n\nexport const DEFAULT_BREAKPOINTS: BreakpointConfig[] = [\n  {\n    name: \"mobile\",\n    width: 320,\n    height: 568,\n    label: \"Mobile\",\n  },\n  {\n    name: \"tablet\",\n    width: 768,\n    height: 1024,\n    label: \"Tablet\",\n  },\n  {\n    name: \"desktop\",\n    width: 1024,\n    height: 768,\n    label: \"Desktop\",\n  },\n  {\n    name: \"wide\",\n    width: 1440,\n    height: 900,\n    label: \"Wide\",\n  },\n];\n\nexport const COMMON_BREAKPOINTS = {\n  mobile: { name: \"mobile\", width: 320, height: 568, label: \"Mobile\" },\n  mobileLarge: {\n    name: \"mobile-lg\",\n    width: 414,\n    height: 736,\n    label: \"Mobile Large\",\n  },\n  tablet: { name: \"tablet\", width: 768, height: 1024, label: \"Tablet\" },\n  desktop: { name: \"desktop\", width: 1024, height: 768, label: \"Desktop\" },\n  desktopLarge: {\n    name: \"desktop-lg\",\n    width: 1200,\n    height: 800,\n    label: \"Desktop Large\",\n  },\n  wide: { name: \"wide\", width: 1440, height: 900, label: \"Wide\" },\n  ultrawide: {\n    name: \"ultrawide\",\n    width: 1920,\n    height: 1080,\n    label: \"Ultra Wide\",\n  },\n} as const;\n",
      "type": "registry:lib"
    }
  ],
  "meta": {
    "tags": [
      "preview",
      "responsive",
      "breakpoint",
      "testing",
      "development",
      "layout"
    ]
  }
}